/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.dash.freq.view;

import io.swagger.client.ApiException;
import io.swagger.client.model.PopulationData;

import java.awt.Color;
import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.io.File;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.List;
import java.util.Set;
import java.util.prefs.Preferences;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;


import org.dash.freq.controller.BatchUploader;
import org.dash.freq.controller.IonCheck;
import org.dash.freq.controller.ReceiptObserver;
import org.dash.freq.controller.UploadTextObservable;
import org.dash.freq.model.Population;
import org.dash.freq.model.PostPopulationFrequencies;

/**
 *
 * @author katrinaeaton
 */
public class PhycusGui extends javax.swing.JFrame {
	
	private File selectedFile;
	public Preferences prefs = Preferences.userNodeForPackage(this.getClass());
	public static final String defaultDatabaseURL = "http://localhost:8080";
	private final PopulationList popList = new PopulationList();
	private final Population population = new Population();
	public static final String userDocumentsPath = 
				(System.getProperty("user.home") 
                + System.getProperty("file.separator") + "Documents" 
                + System.getProperty("file.separator"));
	
	// used in multiple listeners
	private Runnable getPops = new Runnable() 
	{
		public void run() {
			
			try {populations = population.getPopulationsFromDB();}
			catch (Exception ex){ ex.printStackTrace(); }
			popList.updatePopulation("", populations);
		}
	};
	
	// initially populated when program open population tab
	private List<PopulationData> populations;
	
	// Observable
	UploadTextObservable upTextMgr = UploadTextObservable.getInstance();
	
	
	
		
	/**
	 * Creates new form PhycusGui
	 */
	public PhycusGui() 
	{
		initComponents();
		MainTextObserver mto = new MainTextObserver(upTextMgr);
		upTextMgr.addObserver(mto);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooserUpload = new javax.swing.JFileChooser(prefs.get("PHY_INPUT_DIR", userDocumentsPath));
        fileOrFolder = new javax.swing.ButtonGroup();
        ionPopupFrame = new javax.swing.JFrame();
        ionTextField = new javax.swing.JTextField();
        ionEnterButton = new javax.swing.JButton();
        ionCloseButton = new javax.swing.JButton();
        ionInstructions1 = new javax.swing.JLabel();
        ionInstructions2 = new javax.swing.JLabel();
        receiptDirectoryChooser = new javax.swing.JFileChooser(prefs.get("PHY_RECEIPT_CUSTOM_FOLDER", userDocumentsPath));
        advancedOptionsPopupFrame = new javax.swing.JFrame();
        databaseUrlTextField = new javax.swing.JTextField();
        advancedOptionsCloseButton = new javax.swing.JButton();
        databaseUrlLabel = new javax.swing.JLabel();
        databaseDefaultButton = new javax.swing.JButton();
        databaseSetUrlButton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        uploadFilesPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileLocationTextArea = new javax.swing.JTextArea();
        mainUploadButton = new javax.swing.JButton();
        CsvNotificationLabel = new javax.swing.JLabel();
        SelectFilePanel = new javax.swing.JPanel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        mainCancelButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        outputTextPane = new javax.swing.JTextPane();
        licenseComboBox = new javax.swing.JComboBox<>();
        licenseLabel = new javax.swing.JLabel();
        licenseHelpIcon = new javax.swing.JLabel();
        warningLabel = new javax.swing.JLabel();
        ionLabel = new javax.swing.JLabel();
        ionLabelCode = new javax.swing.JLabel();
        fileOpenButton = new javax.swing.JButton();
        CsvNotificationLabel2 = new javax.swing.JLabel();
        CsvNotificationLabel3 = new javax.swing.JLabel();
        ionLabel2 = new javax.swing.JLabel();
        ionLabelFacility = new javax.swing.JLabel();
        populationPanel = new javax.swing.JPanel();
        popSearchTextField = new javax.swing.JTextField();
        popResultsScrollPane = new javax.swing.JScrollPane();
        popResultsTextPane = new javax.swing.JTextPane();
        popCreateButton = new javax.swing.JButton();
        popCancelButton = new javax.swing.JButton();
        popSearchLabel = new javax.swing.JLabel();
        popNotificationsScrollPane = new javax.swing.JScrollPane();
        popNotificationsTextPane = new javax.swing.JTextPane();
        settingsPanel = new javax.swing.JPanel();
        haplotypeEntityLabel = new javax.swing.JLabel();
        haplotypeEntityButton = new javax.swing.JButton();
        verboseCheckBox = new javax.swing.JCheckBox();
        optionsCancelButton = new javax.swing.JButton();
        uploadReceiptLabel = new javax.swing.JLabel();
        uploadReceiptScrollPane = new javax.swing.JScrollPane();
        uploadReceiptTextArea = new javax.swing.JTextArea();
        defaultUploadReceiptCheckBox = new javax.swing.JCheckBox();
        optionsSeparator1 = new javax.swing.JSeparator();
        optionsSeparator2 = new javax.swing.JSeparator();
        optionsSeparator3 = new javax.swing.JSeparator();
        CustomReceiptFolderButton = new javax.swing.JButton();
        advancedOptionsButton = new javax.swing.JButton();
        helpPanel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        helpEditorPane = new javax.swing.JEditorPane();

        FileNameExtensionFilter filter = new FileNameExtensionFilter("Phycus file", "phycus");
        fileChooserUpload.setFileFilter(filter);
        fileChooserUpload.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);

        ionPopupFrame.setVisible(false);
        ionPopupFrame.setTitle("Haplotyping Registry");
        ionPopupFrame.setAlwaysOnTop(true);
        ionPopupFrame.setLocationByPlatform(true);
        ionPopupFrame.setMinimumSize(new java.awt.Dimension(300, 250));
        ionPopupFrame.setName("EstEntityFrame"); // NOI18N

        ionEnterButton.setText("Enter");
        ionEnterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ionEnterButtonActionPerformed(evt);
            }
        });

        ionCloseButton.setText("Close");
        ionCloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ionCloseButtonActionPerformed(evt);
            }
        });

        ionInstructions1.setText("If your facility has an ION number, please enter it");

        ionInstructions2.setText("here (This can be changed in the options tab): ");

        javax.swing.GroupLayout ionPopupFrameLayout = new javax.swing.GroupLayout(ionPopupFrame.getContentPane());
        ionPopupFrame.getContentPane().setLayout(ionPopupFrameLayout);
        ionPopupFrameLayout.setHorizontalGroup(
            ionPopupFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ionPopupFrameLayout.createSequentialGroup()
                .addGroup(ionPopupFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ionPopupFrameLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ionInstructions2))
                    .addGroup(ionPopupFrameLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(ionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ionPopupFrameLayout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(ionEnterButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ionCloseButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ionPopupFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ionInstructions1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        ionPopupFrameLayout.setVerticalGroup(
            ionPopupFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ionPopupFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ionInstructions1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ionInstructions2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(ionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(ionPopupFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ionEnterButton)
                    .addComponent(ionCloseButton))
                .addContainerGap())
        );

        ionPopupFrame.getAccessibleContext().setAccessibleName("");
        // ionPopupFrame.setVisible(false);

        receiptDirectoryChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        ionPopupFrame.setVisible(false);
        advancedOptionsPopupFrame.setTitle("Advanced Options");
        advancedOptionsPopupFrame.setAlwaysOnTop(true);
        advancedOptionsPopupFrame.setLocationByPlatform(true);
        advancedOptionsPopupFrame.setMinimumSize(new java.awt.Dimension(375, 175));
        advancedOptionsPopupFrame.setName("EstEntityFrame"); // NOI18N

        databaseUrlTextField.setText(prefs.get("PHY_DB_URL", defaultDatabaseURL));

        advancedOptionsCloseButton.setText("Close");
        advancedOptionsCloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                advancedOptionsCloseButtonActionPerformed(evt);
            }
        });

        databaseUrlLabel.setText("Database URL:");

        databaseDefaultButton.setText("Reset to default");
        databaseDefaultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                databaseDefaultButtonActionPerformed(evt);
            }
        });

        databaseSetUrlButton.setText("Set database URL");
        databaseSetUrlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                databaseSetUrlButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout advancedOptionsPopupFrameLayout = new javax.swing.GroupLayout(advancedOptionsPopupFrame.getContentPane());
        advancedOptionsPopupFrame.getContentPane().setLayout(advancedOptionsPopupFrameLayout);
        advancedOptionsPopupFrameLayout.setHorizontalGroup(
            advancedOptionsPopupFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(advancedOptionsPopupFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(advancedOptionsPopupFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(databaseUrlTextField)
                    .addGroup(advancedOptionsPopupFrameLayout.createSequentialGroup()
                        .addComponent(databaseUrlLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(advancedOptionsPopupFrameLayout.createSequentialGroup()
                        .addComponent(databaseSetUrlButton, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(databaseDefaultButton, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)))
                .addContainerGap())
            .addGroup(advancedOptionsPopupFrameLayout.createSequentialGroup()
                .addGap(142, 142, 142)
                .addComponent(advancedOptionsCloseButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        advancedOptionsPopupFrameLayout.setVerticalGroup(
            advancedOptionsPopupFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, advancedOptionsPopupFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(databaseUrlLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(databaseUrlTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(advancedOptionsPopupFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(databaseDefaultButton)
                    .addComponent(databaseSetUrlButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(advancedOptionsCloseButton)
                .addContainerGap())
        );

        // ionPopupFrame.setVisible(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Phycus Upload Interface");
        setLocationByPlatform(true);

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        jScrollPane1.setBackground(javax.swing.UIManager.getDefaults().getColor("Label.background"));
        jScrollPane1.setBorder(null);
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setFocusable(false);
        jScrollPane1.setOpaque(false);

        fileLocationTextArea.setEditable(false);
        fileLocationTextArea.setBackground(javax.swing.UIManager.getDefaults().getColor("Label.background"));
        fileLocationTextArea.setColumns(20);
        fileLocationTextArea.setLineWrap(true);
        fileLocationTextArea.setRows(5);
        fileLocationTextArea.setFocusable(false);
        fileLocationTextArea.setOpaque(false);
        jScrollPane1.setViewportView(fileLocationTextArea);

        mainUploadButton.setText("Upload");
        mainUploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainUploadButtonActionPerformed(evt);
            }
        });

        CsvNotificationLabel.setText("You may select individual .phycus files (See help for more information about the suffix.)");

        SelectFilePanel.setLayout(new java.awt.GridBagLayout());
        SelectFilePanel.add(filler1, new java.awt.GridBagConstraints());

        mainCancelButton.setText("Cancel");
        mainCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainCancelButtonActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(outputTextPane);

        licenseComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CC0 - No rights reserved", "BY - Attribution", "BY_SA - Attribution - ShareAlike", "BY_ND - Attribution - NoDerivatives", "BY_NC - Attribution - NonCommercial", "BY_NC_SA - Attribution - NonCommercial - ShareAlike", "BY_NC_ND - Attribution - NonCommercial - NoDerivatives" }));
        licenseComboBox.setToolTipText("");
        licenseComboBox.setSelectedIndex(prefs.getInt("PHY_LICENSE", 0));
        licenseComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                licenseComboBoxActionPerformed(evt);
            }
        });

        licenseLabel.setText("Licensing type:");

        licenseHelpIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smallQuestionMark.png"))); // NOI18N
        licenseHelpIcon.setLabelFor(licenseLabel);
        licenseHelpIcon.setToolTipText("A link to a description of the different licensing types");
        licenseHelpIcon.setAlignmentY(0.1F);
        licenseHelpIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                licenseHelpIconMouseClicked(evt);
            }
        });

        warningLabel.setText("Warnings will not prevent a file from being uploaded. Errors will.");

        ionLabel.setText("Issuing Organization Number (ION):");

        if(!prefs.get("PHY_ION", "").equals("")){
            ionLabelCode.setText(prefs.get("PHY_ION", ""));
            ionLabelCode.setVisible(true);
        } else { ionLabelCode.setVisible(false); }

        fileOpenButton.setText("Select File(s)");
        fileOpenButton.setMaximumSize(new java.awt.Dimension(100, 23));
        fileOpenButton.setMinimumSize(new java.awt.Dimension(100, 23));
        fileOpenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileOpenButtonActionPerformed(evt);
            }
        });

        CsvNotificationLabel2.setText("You may also select folders of .phycus files.");

        CsvNotificationLabel3.setText("Non-phycus files will be ignored as will subdirectories.");

        ionLabel2.setText("ION Facility:");

        if(!prefs.get("PHY_ION_FACILITY", "").equals("")){
            ionLabelFacility.setText(prefs.get("PHY_ION_FACILITY", ""));
            ionLabelFacility.setVisible(true);
        } else { ionLabelFacility.setVisible(false); }

        javax.swing.GroupLayout uploadFilesPanelLayout = new javax.swing.GroupLayout(uploadFilesPanel);
        uploadFilesPanel.setLayout(uploadFilesPanelLayout);
        uploadFilesPanelLayout.setHorizontalGroup(
            uploadFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(uploadFilesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(uploadFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(uploadFilesPanelLayout.createSequentialGroup()
                        .addComponent(CsvNotificationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(40, 40, 40))
                    .addGroup(uploadFilesPanelLayout.createSequentialGroup()
                        .addGroup(uploadFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(uploadFilesPanelLayout.createSequentialGroup()
                                .addComponent(fileOpenButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SelectFilePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1))
                            .addComponent(warningLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
            .addGroup(uploadFilesPanelLayout.createSequentialGroup()
                .addGroup(uploadFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(uploadFilesPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(CsvNotificationLabel2))
                    .addGroup(uploadFilesPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(uploadFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(licenseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(uploadFilesPanelLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(uploadFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(uploadFilesPanelLayout.createSequentialGroup()
                                        .addComponent(ionLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ionLabelCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(uploadFilesPanelLayout.createSequentialGroup()
                                        .addComponent(licenseLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(licenseHelpIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(uploadFilesPanelLayout.createSequentialGroup()
                                        .addComponent(ionLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ionLabelFacility, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))))))
                    .addGroup(uploadFilesPanelLayout.createSequentialGroup()
                        .addGap(192, 192, 192)
                        .addComponent(mainUploadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mainCancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(uploadFilesPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(CsvNotificationLabel3)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        uploadFilesPanelLayout.setVerticalGroup(
            uploadFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, uploadFilesPanelLayout.createSequentialGroup()
                .addGroup(uploadFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, uploadFilesPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(uploadFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SelectFilePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, uploadFilesPanelLayout.createSequentialGroup()
                                .addComponent(fileOpenButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CsvNotificationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(CsvNotificationLabel2)
                .addGap(4, 4, 4)
                .addComponent(CsvNotificationLabel3)
                .addGap(34, 34, 34)
                .addGroup(uploadFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(licenseLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(licenseHelpIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(licenseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(uploadFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ionLabelCode, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ionLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(uploadFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ionLabel2)
                    .addComponent(ionLabelFacility, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addComponent(warningLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(uploadFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mainCancelButton)
                    .addComponent(mainUploadButton))
                .addContainerGap())
        );

        if(!prefs.get("PHY_ION", "").equals("")){
            ionLabel.setVisible(true);
        } else { ionLabel.setVisible(false); }
        if(!prefs.get("PHY_ION", "").equals("")){
            ionLabel2.setVisible(true);
        } else { ionLabel2.setVisible(false); }

        jTabbedPane1.addTab("Upload Files", uploadFilesPanel);

        popSearchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popSearchTextFieldActionPerformed(evt);
            }
        });
        popSearchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                popSearchTextFieldKeyReleased(evt);
            }
        });

        popResultsTextPane.setFont(new java.awt.Font("Courier New", 0, 13)); // NOI18N
        popResultsScrollPane.setViewportView(popResultsTextPane);

        popCreateButton.setText("Create");
        popCreateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popCreateButtonActionPerformed(evt);
            }
        });

        popCancelButton.setText("Cancel");
        popCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popCancelButtonActionPerformed(evt);
            }
        });

        popSearchLabel.setText("Population name:");

        popNotificationsScrollPane.setViewportView(popNotificationsTextPane);

        javax.swing.GroupLayout populationPanelLayout = new javax.swing.GroupLayout(populationPanel);
        populationPanel.setLayout(populationPanelLayout);
        populationPanelLayout.setHorizontalGroup(
            populationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(populationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(populationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(popResultsScrollPane)
                    .addGroup(populationPanelLayout.createSequentialGroup()
                        .addComponent(popSearchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(popSearchTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE))
                    .addComponent(popNotificationsScrollPane))
                .addContainerGap())
            .addGroup(populationPanelLayout.createSequentialGroup()
                .addGap(194, 194, 194)
                .addComponent(popCreateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(popCancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        populationPanelLayout.setVerticalGroup(
            populationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(populationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(populationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(popSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(popSearchLabel))
                .addGap(18, 18, 18)
                .addComponent(popResultsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(popNotificationsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(populationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(popCancelButton)
                    .addComponent(popCreateButton))
                .addGap(6, 6, 6))
        );

        jTabbedPane1.addTab("Populations", populationPanel);

        haplotypeEntityLabel.setText("Reset Issuing Organization Number (ION):");

        haplotypeEntityButton.setText("Reset");
        haplotypeEntityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                haplotypeEntityButtonActionPerformed(evt);
            }
        });

        verboseCheckBox.setText("Verbose reporting");
        verboseCheckBox.setSelected(prefs.getBoolean("PHY_VERBOSE_REPORTING", false));
        if (verboseCheckBox.isSelected()){
            org.dash.freq.view.AppendText.appendToPane(PhycusGui.outputTextPane, "Verbose reporting is on.", Color.BLACK);
            org.dash.freq.view.AppendText.appendToPane(PhycusGui.outputTextPane, System.lineSeparator(), Color.BLACK);
        }
        verboseCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                verboseCheckBoxItemStateChanged(evt);
            }
        });

        optionsCancelButton.setText("Close");
        optionsCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsCancelButtonActionPerformed(evt);
            }
        });

        uploadReceiptLabel.setText("Custom receipt save location:");

        uploadReceiptScrollPane.setBackground(javax.swing.UIManager.getDefaults().getColor("Label.background"));
        uploadReceiptScrollPane.setBorder(null);
        uploadReceiptScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        uploadReceiptScrollPane.setFocusable(false);
        uploadReceiptScrollPane.setOpaque(false);

        uploadReceiptTextArea.setEditable(false);
        uploadReceiptTextArea.setBackground(javax.swing.UIManager.getDefaults().getColor("Label.background"));
        uploadReceiptTextArea.setColumns(20);
        uploadReceiptTextArea.setLineWrap(true);
        uploadReceiptTextArea.setRows(5);
        uploadReceiptTextArea.setFocusable(false);
        uploadReceiptTextArea.setOpaque(false);
        if (defaultUploadReceiptCheckBox.isSelected())
        { uploadReceiptTextArea.setText(prefs.get("PHY_DEFAULT_RECEIPT_FOLDER", userDocumentsPath)); }
        else if (!(defaultUploadReceiptCheckBox.isSelected()))
        { uploadReceiptTextArea.setText(prefs.get("PHY_RECEIPT_CUSTOM_FOLDER", userDocumentsPath)); }
        uploadReceiptScrollPane.setViewportView(uploadReceiptTextArea);

        defaultUploadReceiptCheckBox.setText("Save receipt with uploaded file");
        defaultUploadReceiptCheckBox.setSelected(prefs.getBoolean("PHY_RECEIPT_DEFAULT", true));
        if (defaultUploadReceiptCheckBox.isSelected()){
            org.dash.freq.view.AppendText.appendToPane(PhycusGui.outputTextPane, "Upload receipts will be saved in the folder data files are uploaded from.", Color.BLACK);
            org.dash.freq.view.AppendText.appendToPane(PhycusGui.outputTextPane, System.lineSeparator(), Color.BLACK);
        } else if (!defaultUploadReceiptCheckBox.isSelected()){
            org.dash.freq.view.AppendText.appendToPane(PhycusGui.outputTextPane, "Upload receipts will be saved in " + prefs.get("PHY_RECEIPT_CUSTOM_FOLDER", userDocumentsPath), Color.BLACK);
            org.dash.freq.view.AppendText.appendToPane(PhycusGui.outputTextPane, System.lineSeparator(), Color.BLACK);
        }
        defaultUploadReceiptCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultUploadReceiptCheckBoxActionPerformed(evt);
            }
        });

        CustomReceiptFolderButton.setText("Choose directory");
        if (!(prefs.getBoolean("PHY_RECEIPT_DEFAULT", true)) )
        { CustomReceiptFolderButton.setEnabled(true); }
        else { CustomReceiptFolderButton.setEnabled(false); }
        CustomReceiptFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CustomReceiptFolderButtonActionPerformed(evt);
            }
        });

        advancedOptionsButton.setText("Advanced");
        advancedOptionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                advancedOptionsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addComponent(advancedOptionsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CustomReceiptFolderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(defaultUploadReceiptCheckBox)
                            .addGroup(settingsPanelLayout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(uploadReceiptLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(uploadReceiptScrollPane)
                        .addGap(14, 14, 14))
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addComponent(verboseCheckBox)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(optionsSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(optionsSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, settingsPanelLayout.createSequentialGroup()
                                .addComponent(haplotypeEntityLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(haplotypeEntityButton)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addComponent(optionsSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)))
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addGap(251, 251, 251)
                .addComponent(optionsCancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(defaultUploadReceiptCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(uploadReceiptLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CustomReceiptFolderButton))
                    .addComponent(uploadReceiptScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(optionsSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(verboseCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(optionsSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(haplotypeEntityLabel)
                    .addComponent(haplotypeEntityButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(optionsSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(advancedOptionsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 353, Short.MAX_VALUE)
                .addComponent(optionsCancelButton)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Options", settingsPanel);

        helpEditorPane.setEditable(false);
        helpEditorPane.setContentType("text/html"); // NOI18N
        helpEditorPane.setMaximumSize(new java.awt.Dimension(621, 572));
        helpEditorPane.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {
            public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
                helpEditorPaneHyperlinkUpdate(evt);
            }
        });
        jScrollPane5.setViewportView(helpEditorPane);
        try { helpEditorPane.setText(Help.getHelpText()); }
        catch (Exception ex) { System.out.println(ex); }
        helpEditorPane.setCaretPosition(0);

        javax.swing.GroupLayout helpPanelLayout = new javax.swing.GroupLayout(helpPanel);
        helpPanel.setLayout(helpPanelLayout);
        helpPanelLayout.setHorizontalGroup(
            helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 637, Short.MAX_VALUE)
        );
        helpPanelLayout.setVerticalGroup(
            helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(helpPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Help", helpPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 565, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 627, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileOpenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileOpenButtonActionPerformed
        fileChooserUpload.setVisible(rootPaneCheckingEnabled);
        int returnValue = fileChooserUpload.showOpenDialog(null);
        if (returnValue == fileChooserUpload.APPROVE_OPTION)
        {
			// set the file, get the names necessary
            selectedFile = fileChooserUpload.getSelectedFile();
            String absolutePath = selectedFile.getAbsolutePath();
			String parentFolder = selectedFile.getParent();
			String fileName = selectedFile.getName();
			System.out.println(fileName);
			
            fileLocationTextArea.setText( absolutePath );
			prefs.put("PHY_INPUT_DIR", absolutePath);
			System.out.println(parentFolder);
			
			// save parent folder location for receipt if individual file selected
			if (selectedFile.isFile())

			{
				prefs.put("PHY_DEFAULT_RECEIPT_FOLDER", parentFolder);
			}
			// save absolute path for receipt if folder selected
			else
			{
				prefs.put("PHY_DEFAULT_RECEIPT_FOLDER", absolutePath);
			}
			
			// if saving receipts to default location, update the textarea
			// listing where the receipts are being saved
			if (defaultUploadReceiptCheckBox.isSelected())
			{
				uploadReceiptTextArea.setText(prefs.get("PHY_DEFAULT_RECEIPT_FOLDER", userDocumentsPath));
			}
        }
		System.out.println(prefs.absolutePath());
    }//GEN-LAST:event_fileOpenButtonActionPerformed

    private void mainUploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainUploadButtonActionPerformed
        try
        {	
			// check to make sure there's a file or folder listed in
			// file location text area
			if (!fileLocationTextArea.getText().isEmpty())
			{
				// for a single file
				if (selectedFile.isFile())
				{
					// set up a new Receipt Observer
					ReceiptObserver ro = new ReceiptObserver(upTextMgr, selectedFile);
					try { upTextMgr.addObserver(ro); }
					catch (Exception ex) { 
						System.out.println("Error adding observer"); 
						ex.printStackTrace(); 
					}
					
					// reset TextPane
					outputTextPane.setText("");
					
					// list file name
					upTextMgr.setLine((selectedFile.getName() + ":"), "blue", "gui");
					upTextMgr.setLine(("File name: " + selectedFile.getName() + ":"), "blue", "receipt");
					
					// run as background thread so TextPane updates
					Runnable fileUpload = new Runnable() 
					{
						public void run() {
							try {
								PostPopulationFrequencies ppf = new PostPopulationFrequencies();
								ppf.setFile(selectedFile);
								ppf.call();
								System.out.println("Number of observers: " + upTextMgr.countObservers());
								upTextMgr.setLine("", "black", "receipt");
								upTextMgr.setLine("End of receipt", "black", "receipt");
								upTextMgr.deleteObserver(ro);

							} catch (Exception ex) { ex.printStackTrace(); }
						}
					};
					new Thread(fileUpload).start();
				}
				// for multiple files
				else if (!selectedFile.isFile())
				{
					// reset TextPane
					outputTextPane.setText("");
					
					// run batch job in background so TextPane updates
					Runnable batchUpload = new Runnable() 
					{
						public void run() {
							BatchUploader bu = new BatchUploader();
							bu.uploadFiles(selectedFile.toString());
						}
					};
					
					new Thread(batchUpload).start();
				}
			}
			
			// make sure there is a file selected to prevent crashes
			else 
			{
				outputTextPane.setText("");
				upTextMgr.setLine("Please select a file or folder", "red", "gui");
			}
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_mainUploadButtonActionPerformed

    private void mainCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainCancelButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_mainCancelButtonActionPerformed

    private void licenseHelpIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_licenseHelpIconMouseClicked
		try {
			URI licenseTypes = new URI("https://creativecommons.org/share-your-work/licensing-types-examples/");
			
			// method listed below
			openWebpage(licenseTypes);
		} catch (Exception ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_licenseHelpIconMouseClicked

    private void licenseComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_licenseComboBoxActionPerformed
		prefs.putInt("PHY_LICENSE", licenseComboBox.getSelectedIndex());
    }//GEN-LAST:event_licenseComboBoxActionPerformed

    private void ionCloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ionCloseButtonActionPerformed
        ionPopupFrame.setVisible(false);
    }//GEN-LAST:event_ionCloseButtonActionPerformed

    private void ionEnterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ionEnterButtonActionPerformed

		// if the field isn't blank, is the entered number actually an ion?
		if (!ionTextField.getText().equals("")) {
			IonCheck ionCheck = new IonCheck();
			String[] results = ionCheck.checkIon(ionTextField.getText());
		
			// does results have any data?
			if(results[0] == "") {
				javax.swing.JOptionPane.showMessageDialog(this,
					("Please enter a valid Issuing Organization Number (ION), \n or blank if your facility doesn't have one."),
					"This is an invalid ION",
					javax.swing.JOptionPane.ERROR_MESSAGE);
			}
			
			// save the Estimation entity in the preferences
			prefs.put("PHY_ION", results[0]);
			prefs.put("PHY_ION_FACILITY", results[1]);
			
		// if the field is blank
		} else {
			prefs.put("PHY_ION", "");
			prefs.put("PHY_ION_FACILITY", "");
		}
		
		// set the label on the GUI
		ionLabelCode.setText(prefs.get("PHY_ION", ""));
		ionLabelFacility.setText(prefs.get("PHY_ION_FACILITY", ""));

		if(prefs.get("PHY_ION", "").equals("")) {
			ionLabelCode.setVisible(false);
			ionLabel.setVisible(false);
			ionLabelFacility.setVisible(false);
			ionLabel2.setVisible(false);
		} else {
			ionLabelCode.setVisible(true);
			ionLabel.setVisible(true);
			ionLabelFacility.setVisible(true);
			ionLabel2.setVisible(true);
		}

		// hide the window
		ionPopupFrame.setVisible(false);
		
    }//GEN-LAST:event_ionEnterButtonActionPerformed

    private void haplotypeEntityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_haplotypeEntityButtonActionPerformed
        
		// what's there and where is it? Debugging info
		System.out.println(prefs.get("PHY_EST_ENTITY", "blank"));
		try { System.out.println(prefs.node("PHY_EST_ENTITY"));} 
		catch (Exception ex){System.out.println(ex);}
		
		// show Est entity popup
		ionPopupFrame.setVisible(true);
		
		// debugging info
		System.out.println(prefs.get("PHY_EST_ENTITY", "blank"));
    }//GEN-LAST:event_haplotypeEntityButtonActionPerformed

    private void helpEditorPaneHyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {//GEN-FIRST:event_helpEditorPaneHyperlinkUpdate
        
		// the editor pane has to be told to respond to hyperlinks
		if(evt.getEventType() == javax.swing.event.HyperlinkEvent.EventType.ACTIVATED) {
			
			// get the descriptions in the link
			String desc = evt.getDescription();
			
			// find non-anchor urls
			if (desc == null || !desc.startsWith("#"))
			{
				try {
					// get the uri from the description and open the page
					URI helpUri = new URI(desc);
					openWebpage(helpUri);
				} catch (Exception ex){System.out.println(ex);}
			}
			
			// select the first substring (ideally only substring), name
			desc = desc.substring(1);
			
			// go to the anchor
			helpEditorPane.scrollToReference(desc);
        }
    }//GEN-LAST:event_helpEditorPaneHyperlinkUpdate

    private void popSearchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popSearchTextFieldActionPerformed
//        String popSearchName = popSearchTextField.getText();
//		popList.updatePopulation(popSearchName, populations);
    }//GEN-LAST:event_popSearchTextFieldActionPerformed

    private void popCreateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popCreateButtonActionPerformed
		String popSearchName = popSearchTextField.getText().toUpperCase();
		String popSearchDescription = "";
		List<String> popNames = population.getPopulationNames(populations);
		
		// does this name already exist?		
		if (popNames.contains(popSearchName)) {

			AppendText.appendToPane(popNotificationsTextPane, "The population name already exists", Color.RED);
			AppendText.appendToPane(popNotificationsTextPane, System.lineSeparator(), Color.BLACK);

			javax.swing.JOptionPane.showMessageDialog(this,
				("The population " + popSearchName + " already exists"),
				"This population already exists",
				javax.swing.JOptionPane.ERROR_MESSAGE);
			return;
		}
		
		// the name cannot be blank
		else if (popSearchName == null || popSearchName.equals("")) {
			AppendText.appendToPane(popNotificationsTextPane, "The population name cannot be blank", Color.RED);
			AppendText.appendToPane(popNotificationsTextPane, System.lineSeparator(), Color.BLACK);

			javax.swing.JOptionPane.showMessageDialog(this,
				("The population name cannot be blank"),
				 "Houston, we have a problem",
				 javax.swing.JOptionPane.ERROR_MESSAGE);
			return;
		}
		
		// the name cannot be over 20 characters long
		if (popSearchName.length() > 20) {
			AppendText.appendToPane(popNotificationsTextPane, "The population name cannot be more than 20 characters long", Color.RED);
			AppendText.appendToPane(popNotificationsTextPane, System.lineSeparator(), Color.BLACK);

			javax.swing.JOptionPane.showMessageDialog(this,
				("The population name cannot be more than 20 characters long"),
				 "Houston, we have a problem",
				 javax.swing.JOptionPane.ERROR_MESSAGE);
			return;
		}

		// if name does not exist ask for a description
		else {
			// popup for description
			popSearchDescription = javax.swing.JOptionPane
				.showInputDialog(this, "Please enter a brief description of your population:");

			// if description is empty
			if(popSearchDescription == null || popSearchDescription.equals("")) {
				AppendText.appendToPane(popNotificationsTextPane, "The population description cannot be blank", Color.RED);
				AppendText.appendToPane(popNotificationsTextPane, System.lineSeparator(), Color.BLACK);

				javax.swing.JOptionPane.showMessageDialog(this,
					("The population description cannot be blank"),
					 "Houston, we have a problem",
					 javax.swing.JOptionPane.ERROR_MESSAGE);
				return;
			}
			
			// if description is over 254 characters long
			else if (popSearchDescription.length() >= 255) {
				AppendText.appendToPane(popNotificationsTextPane, "The population description cannot be more than 254 characters long", Color.RED);
				AppendText.appendToPane(popNotificationsTextPane, System.lineSeparator(), Color.BLACK);

				javax.swing.JOptionPane.showMessageDialog(this,
					("The population description cannot be more than 254 characters long"),
					 "Houston, we have a problem",
					 javax.swing.JOptionPane.ERROR_MESSAGE);
				return;
			}
		}

		System.out.println("pop Desc: " + popSearchDescription);		

		try { 
			// create new population in db
			population.createNewPopulation(popSearchName, popSearchDescription);
		} catch (Exception ex) {
			System.out.println(ex);

			javax.swing.JOptionPane.showMessageDialog(this,
				("The population was not created\n" + ex),
				"Houston, we have a problem",
				javax.swing.JOptionPane.ERROR_MESSAGE);
			return;
		}
			
		// notify that new pop has been created
		AppendText.appendToPane(popNotificationsTextPane, ("Population " + popSearchName + " created."), Color.BLACK);
		AppendText.appendToPane(popNotificationsTextPane, System.lineSeparator(), Color.BLACK);

		// clear pop textpane
		popResultsTextPane.setText("");

		// redownload db in background
		new Thread(getPops).start();

		// clear search bar
		popSearchTextField.setText("");
			
    }//GEN-LAST:event_popCreateButtonActionPerformed

    private void popCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popCancelButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_popCancelButtonActionPerformed

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        // load populations when switching to populations tab
		int selectedIndex = jTabbedPane1.getSelectedIndex();
		int popTabIndex = 1;
		
		if (selectedIndex == popTabIndex){
			// clear pop textpane
			popResultsTextPane.setText("");
			AppendText.appendToPane(PhycusGui.popResultsTextPane, "Please wait", Color.BLACK);
			AppendText.appendToPane(PhycusGui.popResultsTextPane, System.lineSeparator(), Color.BLACK);
			
			// populate text pane
			new Thread(getPops).start();
		}
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void verboseCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_verboseCheckBoxItemStateChanged
        // add state to preferences
		prefs.putBoolean("PHY_VERBOSE_REPORTING", verboseCheckBox.isSelected());
		
		// notify user when turned on
		if (verboseCheckBox.isSelected())
		{
			AppendText.appendToPane(outputTextPane, "Verbose reporting is on", Color.BLACK);
			AppendText.appendToPane(outputTextPane, System.lineSeparator(), Color.BLACK);
		}
		
		// notify user when turned off
		else
		{
			AppendText.appendToPane(outputTextPane, "Verbose reporting is off", Color.BLACK);
			AppendText.appendToPane(outputTextPane, System.lineSeparator(), Color.BLACK);
		}
    }//GEN-LAST:event_verboseCheckBoxItemStateChanged

    private void optionsCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsCancelButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_optionsCancelButtonActionPerformed

    private void defaultUploadReceiptCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultUploadReceiptCheckBoxActionPerformed
        // add state to preferences
		prefs.putBoolean("PHY_RECEIPT_DEFAULT", defaultUploadReceiptCheckBox.isSelected());
		
		// notify user when turned on
		if (defaultUploadReceiptCheckBox.isSelected())
		{
			AppendText.appendToPane(outputTextPane, "Upload receipt will be saved in the same folder as the uploaded file.", Color.BLACK);
			AppendText.appendToPane(outputTextPane, System.lineSeparator(), Color.BLACK);
			
			uploadReceiptTextArea.setText(prefs.get("PHY_DEFAULT_RECEIPT_FOLDER", userDocumentsPath));
			
			CustomReceiptFolderButton.setEnabled(false);
		}
		
		// notify user when turned off
		else
		{
			AppendText.appendToPane(outputTextPane, "Upload receipt will be saved in ", Color.BLACK);
			AppendText.appendToPane(outputTextPane, prefs.get("PHY_RECEIPT_CUSTOM_FOLDER", userDocumentsPath), Color.BLACK);
			AppendText.appendToPane(outputTextPane, System.lineSeparator(), Color.BLACK);
			
			uploadReceiptTextArea.setText(prefs.get("PHY_RECEIPT_CUSTOM_FOLDER", userDocumentsPath));
			
			CustomReceiptFolderButton.setEnabled(true);

		}
    }//GEN-LAST:event_defaultUploadReceiptCheckBoxActionPerformed

    private void CustomReceiptFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CustomReceiptFolderButtonActionPerformed
        
		// open the directory chooser
		receiptDirectoryChooser.showOpenDialog(this);
		
		// get selected directory and store in prefs
        File directory = receiptDirectoryChooser.getSelectedFile();
        String directoryLocation = directory.getAbsolutePath();
        uploadReceiptTextArea.setText( directoryLocation );
		prefs.put("PHY_RECEIPT_CUSTOM_FOLDER", directoryLocation);
		System.out.println(directory);

    }//GEN-LAST:event_CustomReceiptFolderButtonActionPerformed

    private void advancedOptionsCloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_advancedOptionsCloseButtonActionPerformed
        // hide the window
		advancedOptionsPopupFrame.setVisible(false);
    }//GEN-LAST:event_advancedOptionsCloseButtonActionPerformed

    private void databaseDefaultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_databaseDefaultButtonActionPerformed
		// set the db url to the default
		prefs.put("PHY_DB_URL", defaultDatabaseURL);
		
		// set the textfield
		databaseUrlTextField.setText(prefs.get("PHY_DB_URL", defaultDatabaseURL));
    }//GEN-LAST:event_databaseDefaultButtonActionPerformed

    private void databaseSetUrlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_databaseSetUrlButtonActionPerformed
        System.out.println(databaseUrlTextField.getText());

		// set the db url to the specified URL
		prefs.put("PHY_DB_URL", databaseUrlTextField.getText());
    }//GEN-LAST:event_databaseSetUrlButtonActionPerformed

    private void advancedOptionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_advancedOptionsButtonActionPerformed
        advancedOptionsPopupFrame.setVisible(true);
    }//GEN-LAST:event_advancedOptionsButtonActionPerformed

    private void popSearchTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_popSearchTextFieldKeyReleased
        String popSearchName = popSearchTextField.getText();
		popList.updatePopulation(popSearchName, populations);
    }//GEN-LAST:event_popSearchTextFieldKeyReleased

	// open links to external browser
	public static void openWebpage(URI uri) {
		Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
		if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {
			try {
				desktop.browse(uri);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
	
	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(PhycusGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(PhycusGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(PhycusGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(PhycusGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new PhycusGui().setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CsvNotificationLabel;
    private javax.swing.JLabel CsvNotificationLabel2;
    private javax.swing.JLabel CsvNotificationLabel3;
    private javax.swing.JButton CustomReceiptFolderButton;
    private javax.swing.JPanel SelectFilePanel;
    private javax.swing.JButton advancedOptionsButton;
    private javax.swing.JButton advancedOptionsCloseButton;
    private javax.swing.JFrame advancedOptionsPopupFrame;
    private javax.swing.JButton databaseDefaultButton;
    private javax.swing.JButton databaseSetUrlButton;
    private javax.swing.JLabel databaseUrlLabel;
    private javax.swing.JTextField databaseUrlTextField;
    private javax.swing.JCheckBox defaultUploadReceiptCheckBox;
    private javax.swing.JFileChooser fileChooserUpload;
    private javax.swing.JTextArea fileLocationTextArea;
    private javax.swing.JButton fileOpenButton;
    private javax.swing.ButtonGroup fileOrFolder;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JButton haplotypeEntityButton;
    private javax.swing.JLabel haplotypeEntityLabel;
    private javax.swing.JEditorPane helpEditorPane;
    private javax.swing.JPanel helpPanel;
    private javax.swing.JButton ionCloseButton;
    private javax.swing.JButton ionEnterButton;
    private javax.swing.JLabel ionInstructions1;
    private javax.swing.JLabel ionInstructions2;
    private javax.swing.JLabel ionLabel;
    private javax.swing.JLabel ionLabel2;
    private javax.swing.JLabel ionLabelCode;
    private javax.swing.JLabel ionLabelFacility;
    private javax.swing.JFrame ionPopupFrame;
    private javax.swing.JTextField ionTextField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    public static javax.swing.JComboBox<String> licenseComboBox;
    private javax.swing.JLabel licenseHelpIcon;
    private javax.swing.JLabel licenseLabel;
    private javax.swing.JButton mainCancelButton;
    private javax.swing.JButton mainUploadButton;
    private javax.swing.JButton optionsCancelButton;
    private javax.swing.JSeparator optionsSeparator1;
    private javax.swing.JSeparator optionsSeparator2;
    private javax.swing.JSeparator optionsSeparator3;
    public static javax.swing.JTextPane outputTextPane;
    private javax.swing.JButton popCancelButton;
    private javax.swing.JButton popCreateButton;
    private javax.swing.JScrollPane popNotificationsScrollPane;
    public static javax.swing.JTextPane popNotificationsTextPane;
    private javax.swing.JScrollPane popResultsScrollPane;
    public static javax.swing.JTextPane popResultsTextPane;
    private javax.swing.JLabel popSearchLabel;
    private javax.swing.JTextField popSearchTextField;
    public static javax.swing.JPanel populationPanel;
    private javax.swing.JFileChooser receiptDirectoryChooser;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.JPanel uploadFilesPanel;
    private javax.swing.JLabel uploadReceiptLabel;
    private javax.swing.JScrollPane uploadReceiptScrollPane;
    private javax.swing.JTextArea uploadReceiptTextArea;
    public static javax.swing.JCheckBox verboseCheckBox;
    private javax.swing.JLabel warningLabel;
    // End of variables declaration//GEN-END:variables
}
